<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[/life/log/messages]]></title>
  <link href="http://i97506051502.github.com/atom.xml" rel="self"/>
  <link href="http://i97506051502.github.com/"/>
  <updated>2012-11-28T18:39:39+09:00</updated>
  <id>http://i97506051502.github.com/</id>
  <author>
    <name><![CDATA[Go Sato]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git 共有リポジトリ & Redmine 連携]]></title>
    <link href="http://i97506051502.github.com/20121128/GitSharedRepoAndRedmine/"/>
    <updated>2012-11-28T18:34:00+09:00</updated>
    <id>http://i97506051502.github.com/20121128/GitSharedRepoAndRedmine</id>
    <content type="html"><![CDATA[<p>Client A のローカルリポジトリ foo を、
example.com の共有リポジトリ (foo.git) にプッシュし
Client B からそれをクローンする手順を解説してみたいと思います。</p>

<h2>環境</h2>

<ul>
<li>Server (example.com)

<ul>
<li>Redmine</li>
<li>git

<ul>
<li>共有リポジトリ (foo.git, bare リポジトリ)</li>
</ul>
</li>
</ul>
</li>
<li>Client A

<ul>
<li>git

<ul>
<li>ローカルリポジトリ (foo, 共有リポジトリにプッシュします)</li>
</ul>
</li>
</ul>
</li>
<li>Client B

<ul>
<li>git

<ul>
<li>ローカルリポジトリ (foo, 共有リポジトリからクローンします)</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Server で共有リポジトリ作成</h2>

<h4>前準備 (ユーザー作成)</h4>

<p>git 用ユーザー &#8216;git&#8217; を作成します。</p>

<pre><code>sudo groupadd -g 8888 git
sudo useradd -g git -u 8888 git
(ユーザー ID とグループ ID は適当に決めてください)
</code></pre>

<p>ユーザー git にスイッチします。</p>

<pre><code>su git
</code></pre>

<h4>共有リポジトリの作成</h4>

<p>Redmine 実行ユーザー (apache など) が読み書きできるディレクトリを作成し、共有リポジトリを作成します。</p>

<pre><code>cd /var/www/html
git init --bare --shared ./foo.git
</code></pre>

<h2>Redmine の設定</h2>

<ol>
<li>プロジェクトの [設定] - [リポジトリ] に移動します。</li>
<li>以下のとおり設定し、[追加] をクリックします。

<ul>
<li>バージョン管理システム -> Git</li>
<li>Path to .git directory -> リポジトリのフルパス (/var/www/html/foo.git) を入力します。</li>
</ul>
</li>
</ol>


<h2>Client A -> Server に、プッシュ！</h2>

<p>ローカルリポジトリ foo を作成し、example.com の foo.git 共有リポジトリにプッシュします。</p>

<pre><code>cd ~
mkdir foo
cd foo
git init
git add .
git commit -a
(コミットのコメントを書きます。ここでは 'first commit' とします)
git remote add origin git@example.com:/var/www/html/foo.git
git push origin master
git log
(first commit というコメントが見れます)
</code></pre>

<h2>Client B &lt;- Server と、クローン！</h2>

<p>example.com の foo.git 共有リポジトリをローカルにクローンします。</p>

<pre><code>cd ~
git clone git@example.com:/var/www/html/foo.git
(クローン完了)
git log
(first commit というコメントが見れます)
</code></pre>

<p>これで、お互いの更新を、共有リポジトリを介して共有し合う準備ができました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon Linux ベース構築手順]]></title>
    <link href="http://i97506051502.github.com/20121126/FoundationOfAmazonLinux/"/>
    <updated>2012-11-26T17:24:00+09:00</updated>
    <id>http://i97506051502.github.com/20121126/FoundationOfAmazonLinux</id>
    <content type="html"><![CDATA[<h2>ベース？</h2>

<p>これから何度も使うであろう Amazon Linux の EC2 インスタンス。
大体のサーバーに共通で必要と思われる部分を構築し、様々なサーバーのベースとしようと思います。</p>

<p>micro インスタンスで構築すると諸々のインストール（特に rdoc 関連）に時間がかかるので small インスタンス にて構築を行い、完了後に AMI 化を行います。</p>

<p>まずは EC2 Management Console の「Launch Instances」をクリックし、Classic Wizard でベーシックな EC2 インスタンスを起動します。</p>

<p>（スペックを書く）</p>

<h2>構築手順</h2>

<h3>ユーザーとグループの作成</h3>

<p>デフォルトの ec2-user で使うのも何だか味気ないので、普段使っているユーザーとグループを作成し、それを使おうと思います。
まずはグループを作ってからユーザーを作ります。</p>

<p>ユーザーは sudo ができるように wheel グループに入れておきましょう。</p>

<pre><code>$ sudo groupadd -g グループID グループ名
$ sudo useradd -g ユーザーID -G 10 ユーザー名
</code></pre>

<h4>◆ sudo の許可</h4>

<p>作ったユーザーが sudo できるようにする。
パスワードはいちいち入れたくないので以下のようにした。</p>

<pre><code>$ sudo vi /etc/sudores

## Same thing without a password
# %wheel    ALL=(ALL)     NOPASSWD: ALL
↓コメントイン
%wheel    ALL=(ALL)     NOPASSWD: ALL
</code></pre>

<h4>◆ git と zsh のインストール</h4>

<p>yum でサックリ</p>

<pre><code>$ sudo yum install git
$ sudo yum install zsh
</code></pre>

<h4>◆ 各ユーザーの環境設定</h4>

<p>以下の作業は あなたが作ったユーザー, ec2-user, root それぞれで実行する。</p>

<p>（ec2-user はまだしも、root は vim の設定など合わせておかないと sudo 時に違う設定で vim を開いたりしてしまい面倒だから）</p>

<h5>- git config の設定</h5>

<pre><code>$ git config --global user.name 'Go Sato'
$ git config --global user.email i97506051502@gmail.com
$ git config --global core.pager less
$ git config --global color.ui auto
$ git config --global core.editor vim
</code></pre>

<h5>- github 用ディレクトリの作成</h5>

<pre><code>$ mkdir ~/github
</code></pre>

<h5>- bash から zsh に変更</h5>

<pre><code>$ sudo chsh -s /bin/zsh ユーザー名
</code></pre>

<h5>- 公開鍵のコピー</h5>

<pre><code>$ sudo cp -r /home/ec2-user/.ssh ~/
$ sudo chown ユーザー名:グループ名 .ssh
$ sudo chown ユーザー名:グループ名 .ssh/authorized_keys
</code></pre>

<h5>- GitHub 用の SSH 公開鍵を設定</h5>

<pre><code>$ ssh-keygen -t dsa

/home/ユーザー名/.ssh/id_dsa_github
</code></pre>

<p>パスワードは入れません。入れたい人はどうぞ。面倒になりますが。</p>

<pre><code>$ chmod 400 ~/.ssh/id_dsa_github
$ chmod 400 ~/.ssh/id_dsa_github.pub
</code></pre>

<p>id_dsa_github.pub の内容を GitHub に登録します。</p>

<h5>- GitHub 用の SSH config を作成</h5>

<pre><code>$ vi ~/.ssh/config

Host github.com
User git
Hostname github.com
IdentityFile ~/.ssh/id_dsa_github

$ chmod 600 ~/.ssh/config
</code></pre>

<h5>- oh-my-zsh のインストール</h5>

<p>oh-my-zsh を GitHub にてフォークしてクローンしてインストールします。</p>

<pre><code>$ cd ~/github
$ git clone git@github.com:GitHubのユーザー名/oh-my-zsh.git oh-my-zsh
</code></pre>

<h5>- oh-my-zsh の .zshrc を適用</h5>

<pre><code>$ cp -a ~/github/oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
$ vi ~/.zshrc

#ZSH=$HOME/.oh-my-zsh
↓変更
ZSH=$HOME/github/oh-my-zsh

$ source ~/.zshrc
</code></pre>

<h5>- .zshrc カスタム設定の適用</h5>

<pre><code>$ vi ~/github/oh-my-zsh/custom/i97506051502.zsh
</code></pre>

<p>とりあえずこんなところを。</p>

<pre><code>set -o vi
alias ll='ls -laG'
alias vi='vim'
export LANG=ja_JP.UTF-8
HISTTIMEFORMAT='%Y%m%d %T '; export HISTTIMEFORMAT
export HISTCONTROL=ignoredups
export HISTCONTROL=ignorespace
export HISTSIZE=16776960
</code></pre>

<p>ユーザー個別設定はここまで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://i97506051502.github.com/20121122/HelloWorld/"/>
    <updated>2012-11-22T16:45:00+09:00</updated>
    <id>http://i97506051502.github.com/20121122/HelloWorld</id>
    <content type="html"><![CDATA[<p>2012 年 11 月 22 日, 本日よりこの blog を開始したいと思います.</p>

<p>内容は技術系がメインになると思います.</p>

<p>簡単だと思っていた, Octopress + GitHub Pages での blog 開設ですが, ローカルの Mac OS X 10.6.8 の Ruby 環境に起因すると思われる諸々のエラーに苦しめられました.
(rake generate でエラーが出ていました)</p>

<p>どこでハマったか, どうやって解決したか, などは追々書いていきたいと思います.</p>
]]></content>
  </entry>
  
</feed>
